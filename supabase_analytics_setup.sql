-- Enhanced Analytics Setup for GoTall Landing Page
-- Run this in your Supabase SQL Editor

-- 1. Create platform-specific click tracking table
CREATE TABLE IF NOT EXISTS public.platform_clicks (
  id bigint generated by default as identity primary key,
  event_name text not null,
  platform text not null check (platform in ('ios', 'android')),
  tracking_prefix text,
  metadata jsonb,
  session_id text,
  user_agent text,
  device_type text,
  browser text,
  os text,
  country text,
  city text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- 2. Set up Row Level Security (RLS) for platform_clicks
ALTER TABLE public.platform_clicks ENABLE ROW LEVEL SECURITY;

-- 3. Create policy to allow inserts from anyone
CREATE POLICY "Allow public inserts for platform_clicks" ON public.platform_clicks
  FOR INSERT WITH CHECK (true);

-- 4. Create policy to allow reads for authenticated users (optional)
CREATE POLICY "Allow authenticated reads for platform_clicks" ON public.platform_clicks
  FOR SELECT USING (auth.role() = 'authenticated');

-- 5. Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_platform_clicks_event_name ON public.platform_clicks(event_name);
CREATE INDEX IF NOT EXISTS idx_platform_clicks_platform ON public.platform_clicks(platform);
CREATE INDEX IF NOT EXISTS idx_platform_clicks_tracking_prefix ON public.platform_clicks(tracking_prefix);
CREATE INDEX IF NOT EXISTS idx_platform_clicks_created_at ON public.platform_clicks(created_at);

-- 6. Create a view for platform click analytics
CREATE OR REPLACE VIEW public.platform_click_analytics AS
SELECT 
  DATE(created_at) as date,
  event_name,
  platform,
  tracking_prefix,
  COUNT(*) as total_clicks,
  COUNT(DISTINCT session_id) as unique_sessions
FROM public.platform_clicks
GROUP BY DATE(created_at), event_name, platform, tracking_prefix
ORDER BY date DESC, total_clicks DESC;

-- 7. Create a function to get platform click summary
CREATE OR REPLACE FUNCTION get_platform_click_summary(
  start_date date DEFAULT CURRENT_DATE - INTERVAL '30 days',
  end_date date DEFAULT CURRENT_DATE
)
RETURNS TABLE (
  event_name text,
  platform text,
  total_clicks bigint,
  unique_sessions bigint,
  click_rate numeric
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    pc.event_name,
    pc.platform,
    COUNT(*) as total_clicks,
    COUNT(DISTINCT pc.session_id) as unique_sessions,
    ROUND(
      (COUNT(*)::numeric / NULLIF(COUNT(DISTINCT pc.session_id), 0)), 2
    ) as click_rate
  FROM public.platform_clicks pc
  WHERE DATE(pc.created_at) BETWEEN start_date AND end_date
  GROUP BY pc.event_name, pc.platform
  ORDER BY total_clicks DESC;
END;
$$ LANGUAGE plpgsql;

-- 8. Create a function to get daily platform breakdown
CREATE OR REPLACE FUNCTION get_daily_platform_breakdown(
  days integer DEFAULT 30
)
RETURNS TABLE (
  date date,
  platform text,
  total_clicks bigint,
  unique_sessions bigint
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    DATE(pc.created_at) as date,
    pc.platform,
    COUNT(*) as total_clicks,
    COUNT(DISTINCT pc.session_id) as unique_sessions
  FROM public.platform_clicks pc
  WHERE pc.created_at >= CURRENT_DATE - (days || ' days')::interval
  GROUP BY DATE(pc.created_at), pc.platform
  ORDER BY date DESC, total_clicks DESC;
END;
$$ LANGUAGE plpgsql;

-- 9. Create a function to get tracking prefix performance
CREATE OR REPLACE FUNCTION get_tracking_prefix_performance(
  days integer DEFAULT 30
)
RETURNS TABLE (
  tracking_prefix text,
  platform text,
  total_clicks bigint,
  unique_sessions bigint,
  conversion_rate numeric
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    pc.tracking_prefix,
    pc.platform,
    COUNT(*) as total_clicks,
    COUNT(DISTINCT pc.session_id) as unique_sessions,
    ROUND(
      (COUNT(*)::numeric / NULLIF(COUNT(DISTINCT pc.session_id), 0)), 2
    ) as conversion_rate
  FROM public.platform_clicks pc
  WHERE pc.created_at >= CURRENT_DATE - (days || ' days')::interval
    AND pc.tracking_prefix IS NOT NULL
  GROUP BY pc.tracking_prefix, pc.platform
  ORDER BY total_clicks DESC;
END;
$$ LANGUAGE plpgsql;

-- 10. Grant necessary permissions
GRANT SELECT ON public.platform_clicks TO anon;
GRANT INSERT ON public.platform_clicks TO anon;
GRANT SELECT ON public.platform_click_analytics TO anon;
GRANT EXECUTE ON FUNCTION get_platform_click_summary TO anon;
GRANT EXECUTE ON FUNCTION get_daily_platform_breakdown TO anon;
GRANT EXECUTE ON FUNCTION get_tracking_prefix_performance TO anon;

-- 11. Insert some sample data for testing (optional)
-- INSERT INTO public.platform_clicks (event_name, platform, tracking_prefix, session_id, user_agent, device_type, browser, os)
-- VALUES 
--   ('hero_ios_clicked', 'ios', 'hero', 'test-session-1', 'Mozilla/5.0...', 'desktop', 'Chrome', 'macOS'),
--   ('hero_android_clicked', 'android', 'hero', 'test-session-2', 'Mozilla/5.0...', 'mobile', 'Safari', 'iOS'),
--   ('nav_ios_clicked', 'ios', 'nav', 'test-session-3', 'Mozilla/5.0...', 'desktop', 'Firefox', 'Windows'),
--   ('nav_android_clicked', 'android', 'nav', 'test-session-4', 'Mozilla/5.0...', 'mobile', 'Chrome', 'Android');

-- 12. Create a materialized view for performance (optional, for high-traffic sites)
-- CREATE MATERIALIZED VIEW public.platform_clicks_daily AS
-- SELECT 
--   DATE(created_at) as date,
--   platform,
--   COUNT(*) as total_clicks,
--   COUNT(DISTINCT session_id) as unique_sessions
-- FROM public.platform_clicks
-- GROUP BY DATE(created_at), platform;

-- 13. Create a refresh function for the materialized view (if using it)
-- CREATE OR REPLACE FUNCTION refresh_platform_clicks_daily()
-- RETURNS void AS $$
-- BEGIN
--   REFRESH MATERIALIZED VIEW public.platform_clicks_daily;
-- END;
-- $$ LANGUAGE plpgsql;

-- 14. Set up a cron job to refresh the materialized view daily (if using it)
-- SELECT cron.schedule(
--   'refresh-platform-clicks-daily',
--   '0 0 * * *', -- Daily at midnight
--   'SELECT refresh_platform_clicks_daily();'
-- );

-- Usage Examples:
-- 
-- 1. Get all platform clicks for the last 30 days:
-- SELECT * FROM get_platform_click_summary();
-- 
-- 2. Get daily breakdown by platform:
-- SELECT * FROM get_daily_platform_breakdown(7);
-- 
-- 3. Get performance by tracking prefix:
-- SELECT * FROM get_tracking_prefix_performance(30);
-- 
-- 4. Get specific event performance:
-- SELECT * FROM platform_clicks 
-- WHERE event_name = 'hero_ios_clicked' 
-- AND created_at >= CURRENT_DATE - INTERVAL '7 days';
-- 
-- 5. Get platform comparison:
-- SELECT 
--   platform,
--   COUNT(*) as total_clicks,
--   COUNT(DISTINCT session_id) as unique_sessions
-- FROM platform_clicks 
-- WHERE created_at >= CURRENT_DATE - INTERVAL '30 days'
-- GROUP BY platform; 